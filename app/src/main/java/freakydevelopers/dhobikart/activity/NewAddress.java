package freakydevelopers.dhobikart.activity;import android.content.Context;import android.content.Intent;import android.os.AsyncTask;import android.os.Bundle;import android.support.v7.app.AppCompatActivity;import android.view.MenuItem;import android.view.View;import android.widget.AdapterView;import android.widget.ArrayAdapter;import android.widget.Button;import android.widget.EditText;import android.widget.Spinner;import android.widget.TextView;import android.widget.Toast;import com.google.gson.Gson;import com.wang.avi.AVLoadingIndicatorView;import org.json.JSONException;import org.json.JSONObject;import java.io.IOException;import java.util.ArrayList;import java.util.List;import freakydevelopers.dhobikart.R;import freakydevelopers.dhobikart.Resources.MyToast;import freakydevelopers.dhobikart.connection.CheckNet;import freakydevelopers.dhobikart.pojo.Address;import okhttp3.MediaType;import okhttp3.Request;import okhttp3.RequestBody;import okhttp3.Response;import static freakydevelopers.dhobikart.Resources.MyURL.ADDRESSDELETE;import static freakydevelopers.dhobikart.Resources.MyURL.ADDRESSSAVE;import static freakydevelopers.dhobikart.Resources.MyURL.ADDRESSUPDATE;import static freakydevelopers.dhobikart.activity.LauncherActivity.client;public class NewAddress extends AppCompatActivity {    EditText name, phone, city, state, area, landmark, alterphone;    TextView nameError, phoneError, areaError;    Button save, update, remove;    Spinner spinnerPin;    JSONObject json;    String PinCode = "";    public static final MediaType JSON = MediaType.parse("application/json; charset=utf-8");    public AVLoadingIndicatorView indicatorView;    boolean whichActivity = false;    Address address;    boolean ifUpdated = false;    boolean ifRemoved = false;    boolean ifsaved = false;    boolean pinCheck = false;    int id = -1;    private Context context;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_new_address);        name = (EditText) findViewById(R.id.name);        nameError = (TextView) findViewById(R.id.nameError);        phone = (EditText) findViewById(R.id.phone);        phoneError = (TextView) findViewById(R.id.phoneError);        city = (EditText) findViewById(R.id.city);        state = (EditText) findViewById(R.id.state);        area = (EditText) findViewById(R.id.area);        areaError = (TextView) findViewById(R.id.areaError);        landmark = (EditText) findViewById(R.id.landmark);        alterphone = (EditText) findViewById(R.id.alternatephone);        save = (Button) findViewById(R.id.save);        indicatorView = (AVLoadingIndicatorView) findViewById(R.id.avi);        update = (Button) findViewById(R.id.update);        remove = (Button) findViewById(R.id.remove);        spinnerPin = (Spinner) findViewById(R.id.pin);        context = this;        city.setEnabled(false);        state.setEnabled(false);        getSupportActionBar().setDisplayShowTitleEnabled(true);        getSupportActionBar().setHomeButtonEnabled(true);        getSupportActionBar().setDisplayHomeAsUpEnabled(true);        getSupportActionBar().setTitle("Add New Address");    }    @Override    protected void onStart() {        super.onStart();        List<String> list = new ArrayList<String>();        list.add("713101");        list.add("713104");        list.add("713201");        list.add("713202");        list.add("713203");        list.add("713204");        list.add("713205");        list.add("713206");        list.add("713207");        list.add("713208");        list.add("713209");        list.add("713210");        list.add("713211");        list.add("713212");        list.add("713213");        list.add("713214");        list.add("713215");        list.add("713216");        list.add("713217");        ArrayAdapter<String> dataAdapter = new ArrayAdapter<String>(this,                android.R.layout.simple_spinner_item, list);        dataAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);        spinnerPin.setAdapter(dataAdapter);        spinnerPin.setOnItemSelectedListener(new CustomOnItemSelectedListener());        Intent intent = getIntent();        whichActivity = intent.getBooleanExtra("whichActivity", false);        if (whichActivity) {            address = new Gson().fromJson(intent.getStringExtra("address"), Address.class);            id = intent.getIntExtra("id", -1);            name.setText(address.getName());            phone.setText(address.getPhone());            city.setText(address.getCity());            state.setText(address.getState());            area.setText(address.getArea());            landmark.setText(address.getLandmark());            alterphone.setText(address.getAlterphone());            save.setVisibility(View.GONE);            save.setEnabled(false);            save.setClickable(false);            update.setVisibility(View.VISIBLE);            update.setEnabled(true);            update.setClickable(true);            remove.setVisibility(View.VISIBLE);            remove.setEnabled(true);            remove.setClickable(true);            try {                for (int position = 0; position < dataAdapter.getCount(); position++) {                    if (dataAdapter.getItem(position).equals(address.getPin())) {                        spinnerPin.setSelection(position);                        break;                    }                }            } catch (Exception e) {                Toast.makeText(this, "Something went wrong.", Toast.LENGTH_SHORT).show();            }        } else {            update.setVisibility(View.GONE);            update.setEnabled(false);            update.setClickable(false);            remove.setVisibility(View.GONE);            remove.setEnabled(false);            remove.setClickable(false);        }        update.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                String Name, Phone, Pin, City, State, Area, Landmark, Alterphone;                boolean checking = false;                try {                    Name = name.getText().toString();                    Phone = phone.getText().toString();                    City = city.getText().toString();                    State = state.getText().toString();                    Area = area.getText().toString();                    Landmark = landmark.getText().toString();                    Alterphone = alterphone.getText().toString();                    if (Name.isEmpty() || Name.length() == 0 || Name.equals("") || Name == null) {                        nameError.setVisibility(View.VISIBLE);                        checking = false;                    } else {                        checking = true;                    }                    if (Phone.isEmpty() || Phone.length() == 0 || Phone.equals("") || Phone == null) {                        phoneError.setVisibility(View.VISIBLE);                        checking = false;                    } else {                        checking = true;                    }                    if (Area.isEmpty() || Area.length() == 0 || Area.equals("") || Area == null) {                        areaError.setVisibility(View.VISIBLE);                        checking = false;                    } else {                        checking = true;                    }                    if (checking && CheckNet.checkNet(context)) {                        ifUpdated = true;                        try {                            json = new JSONObject();                            json.put("id", address.getId());                            json.put("name", Name);                            json.put("phone", Phone);                            json.put("pin", PinCode);                            json.put("city", City);                            json.put("state", State);                            json.put("area", Area);                            json.put("landmark", Landmark);                            json.put("alterphone", Alterphone);                            new AddtoAddress().execute(json.toString(), ADDRESSUPDATE);                        } catch (JSONException e) {                            e.printStackTrace();                        }                    }                } catch (NullPointerException e) {                    MyToast.showToast(context, "Please try Again!!");                    e.printStackTrace();                }            }        });        remove.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                if (CheckNet.checkNet(context)) {                    ifRemoved = true;                    new AddtoAddress().execute(address.getId() + "", ADDRESSDELETE);                }            }        });    }    @Override    public boolean onOptionsItemSelected(MenuItem item) {        int id = item.getItemId();        if (id == android.R.id.home) {            this.finish();            return true;        }        return super.onOptionsItemSelected(item);    }    @Override    protected void onResume() {        super.onResume();        save.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                String Name, Phone, City, State, Area, Landmark, Alterphone;                boolean checking = false;                try {                    Name = name.getText().toString();                    Phone = phone.getText().toString();                    City = city.getText().toString();                    State = state.getText().toString();                    Area = area.getText().toString();                    Landmark = landmark.getText().toString();                    Alterphone = alterphone.getText().toString();                    if (Name.isEmpty() || Name.length() == 0 || Name.equals("") || Name == null) {                        nameError.setVisibility(View.VISIBLE);                        checking = false;                    } else {                        checking = true;                    }                    if (Phone.isEmpty() || Phone.length() == 0 || Phone.equals("") || Phone == null) {                        phoneError.setVisibility(View.VISIBLE);                        checking = false;                    } else {                        checking = true;                    }                    if (Area.isEmpty() || Area.length() == 0 || Area.equals("") || Area == null) {                        areaError.setVisibility(View.VISIBLE);                        checking = false;                    } else {                        checking = true;                    }                    if (Area.isEmpty() || Area.length() == 0 || Area.equals("") || Area == null) {                        areaError.setVisibility(View.VISIBLE);                        checking = false;                    } else {                        checking = true;                    }                    if (checking && CheckNet.checkNet(context) && pinCheck) {                        ifsaved = true;                        try {                            json = new JSONObject();                            json.put("name", Name);                            json.put("phone", Phone);                            json.put("pin", PinCode);                            json.put("city", City);                            json.put("state", State);                            json.put("area", Area);                            json.put("landmark", Landmark);                            json.put("alterphone", Alterphone);                            new AddtoAddress().execute(json.toString(), ADDRESSSAVE);                        } catch (JSONException e) {                            e.printStackTrace();                        }                    }                } catch (NullPointerException e) {                    MyToast.showToast(context, "Please try again Later!!");                    e.printStackTrace();                }            }        });    }    class AddtoAddress extends AsyncTask<String, Void, String> {        @Override        protected void onPreExecute() {            super.onPreExecute();            indicatorView.show();        }        @Override        protected String doInBackground(String... json) {            String string = "unsuccessful";            Request request;            try {                RequestBody body = RequestBody.create(JSON, String.valueOf(json[0]));                if (ifsaved || ifUpdated) {                    request = new Request.Builder()                            .url(String.valueOf(json[1]))                            .addHeader("token", BaseApplication.getToken())                            .post(body)                            .build();                } else {                    request = new Request.Builder()                            .url(String.valueOf(json[1]))                            .addHeader("token", BaseApplication.getToken())                            .addHeader("addressId", json[0])                            .build();                }                Response response = client.newCall(request).execute();                string = response.body().string();            } catch (IOException e) {                e.printStackTrace();            }            return string;        }        @Override        protected void onPostExecute(String s) {            super.onPostExecute(s);            if (s.equals("success") && ifsaved) {                ifRemoved = false;                ifUpdated = false;                MyToast.showToast(context, "Successfully Added!!");                finish();            } else if (s.equals("success") && ifUpdated) {                ifRemoved = false;                MyToast.showToast(context, "Successfully Updated!!");                finish();            } else if (s.equals("success") && ifRemoved) {                ifUpdated = false;                MyToast.showToast(context, "Successfully Removed!!");                finish();            } else {                MyToast.showToast(context, "Please try Again Later!!");            }            indicatorView.hide();        }    }    class CustomOnItemSelectedListener implements AdapterView.OnItemSelectedListener {        public void onItemSelected(AdapterView<?> parent, View view, int pos, long id) {            pinCheck = true;            PinCode = parent.getItemAtPosition(pos).toString();            switch (PinCode) {                case "713101":                    city.setText("Burdwan");                    break;                case "713104":                    city.setText("Burdwan");                    break;                default:                    city.setText("Durgapur");                    break;            }        }        @Override        public void onNothingSelected(AdapterView<?> arg0) {            pinCheck = false;        }    }}